<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
        xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <!-- JDBC连接数据库数据源 -->
    <!-- <bean id="dataSource" -->
    <!-- class="org.springframework.jdbc.datasource.DriverManagerDataSource"> -->
    <!-- <property name="driverClassName" value="${jdbc.driverClassName}" /> -->
    <!-- <property name="url" value="${jdbc.url}" /> -->
    <!-- <property name="username" value="${jdbc.username}" /> -->
    <!-- <property name="password" value="${jdbc.password}" /> -->
    <!-- </bean> -->

    <!-- DBCP连接池 -->
    <!--    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" -->
    <!--        destroy-method="close"> -->
    <!--        <property name="driverClassName" value="${jdbc.driverClassName}" /> -->
    <!--        <property name="url" value="${jdbc.url}" /> -->
    <!--        <property name="username" value="${jdbc.username}" /> -->
    <!--        <property name="password" value="${jdbc.password}" /> -->
    <!--        <property name="initialSize" value="20" /> -->
    <!--        <property name="maxActive" value="80" /> -->
    <!--        <property name="maxIdle" value="100" /> -->
    <!--        <property name="minIdle" value="20" /> -->
    <!--        <property name="validationQuery" value="SELECT COUNT(*) FROM DUAL"></property> -->
    <!--        <property name="testOnBorrow" value="true"></property> -->
    <!--        <property name="testOnReturn" value="true"></property> -->
    <!--        <property name="testWhileIdle" value="true"></property> -->
    <!--    </bean> -->

    <bean id="dataSource" class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init" destroy-method="close">
        <property name="uniqueResourceName" value="ds1" />
        <!--        <property name="xaDataSourceClassName" value="${jdbc.driverClassName}" /> -->
        <property name="xaDataSourceClassName" value="com.mysql.jdbc.jdbc2.optional.MysqlXADataSource" />
        <property name="xaProperties">
            <props>
                <prop key="URL">${jdbc.url}</prop>
                <prop key="user">${jdbc.username}</prop>
                <prop key="password">${jdbc.password}</prop>
            </props>
        </property>
        <!--        #连接池中保留的最小连接数 -->
        <property name="minPoolSize" value="5" />
        <!--        #连接池中保留的最大连接数  -->
        <property name="maxPoolSize" value="20" />
        <!--        #最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default:  -->
        <property name="maxIdleTime" value="60" />
        <property name="testQuery">
            <value>select 1</value>
        </property>
    </bean>


    <!-- JNDI连接池 -->
    <!-- <bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean"> -->
    <!-- <property name="jndiName"> -->
    <!-- <value>java:comp/env/jdbc/huiyzl</value> -->
    <!-- </property> -->
    <!-- </bean> -->

    <!-- 配置SqlSessionFactoryBean -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <!-- mapper和resultmap配置路径 -->
        <property name="mapperLocations">
            <list>
                <!-- 注意classpath后面的星号不可省略，否则不能加载jar包中的xml文件 -->
                <value>classpath*:com/hvgroup/zhuhai10086/jms/**/sql/mysql/*Mapper.xml
                </value>
            </list>
        </property>
        <property name="plugins">
            <array>
                <!-- 关于分页插件的使用说明：http://git.oschina.net/free/Mybatis_PageHelper/blob/master/wikis/HowToUse.markdown -->
                <bean class="com.github.pagehelper.PageHelper">
                    <property name="properties">
                        <value>
                            offsetAsPageNum=true
                            rowBoundsWithCount=true
                            reasonable=true
                        </value>
                    </property>
                </bean>
            </array>
        </property>
    </bean>

    <!-- 事务管理 -->
    <!--    <bean id="transactionManager" -->
    <!--        class="org.springframework.jdbc.datasource.DataSourceTransactionManager"> -->
    <!--        <property name="dataSource" ref="dataSource" /> -->
    <!--    </bean> -->

    <!-- MapperScanner配置，Spring 自动去搜索mapper里的对象,并注入。指定markerInterface表示只有继承SqlMapper接口的接口，才会被扫描映射 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.hvgroup.zhuhai10086.jms.**.mapper" />
        <property name="markerInterface" value="com.hvgroup.zhuhai10086.jms.mapper.SqlMapper" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>


    <bean id="userTransactionService" class="com.atomikos.icatch.config.UserTransactionServiceImp"
          init-method="init" destroy-method="shutdownForce">
        <constructor-arg>
            <props>
                <prop key="com.atomikos.icatch.service">com.atomikos.icatch.standalone.UserTransactionServiceFactory</prop>
            </props>
        </constructor-arg>
    </bean>

    <bean id="atomikosTransactionManager"
          class="com.atomikos.icatch.jta.UserTransactionManager"
          depends-on="userTransactionService"
          init-method="init" destroy-method="close" >
        <property name="forceShutdown" value="false"/>
    </bean>

    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp" >
        <property name="transactionTimeout" value="300"/>
    </bean>

    <!-- 分布式事务 -->
    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager" ref="atomikosTransactionManager"/>
        <property name="userTransaction" ref="atomikosUserTransaction"/>
    </bean>

    <!--    <tx:jta-transaction-manager /> -->
    <!-- 可通过注解控制事务，也可以配置拦截器方式配置事务 -->
    <tx:annotation-driven transaction-manager="jtaTransactionManager" />

</beans>